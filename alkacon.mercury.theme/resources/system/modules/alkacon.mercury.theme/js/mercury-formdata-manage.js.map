{"version":3,"file":"mercury-formdata-manage.js?ver=0cedf59682a0c37a6cee","mappings":"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","sources":["webpack://mercury-template/./template-src/js/formdata-manage.js"],"sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Submissions dialog.\n */\nclass SubmissionsDialog {\n\n    /**\n     * Creates a new submissions dialog.\n     * @param element the formdata manage root element\n     * @param dialog the dialog element\n     */\n    constructor(element, dialog) {\n        this.m_dialog = dialog;\n        this.m_button = element.querySelector(\"#\" + this.action + \"_button_\" + this.itemId);\n        this.m_button.addEventListener(\"click\", () =>  { this.m_dialog.showModal(); });\n        this.m_dialog.addEventListener(\"close\", () => { this.onConfirm() });\n    }\n\n    /**\n     * Returns the action name.\n     */\n    get action() {\n        return this.m_dialog.dataset.action;\n    }\n\n    /**\n     * Returns the content id.\n     */\n    get contentId() {\n        return this.m_dialog.dataset.contentId;\n    }\n\n    /**\n     * Returns the item id.\n     */\n    get itemId() {\n        return this.m_dialog.dataset.itemId;\n    }\n    \n    /**\n     * Returns the formmanage request parameter.\n     */\n    get formmanage() {\n        const params = new URLSearchParams(location.search);\n        return params.get(\"formmanage\");\n    }\n\n    /**\n     * On confirm handler.\n     */\n    onConfirm() {\n        if (this.m_dialog.returnValue == \"confirm\") {\n            location.href = \"?formmanage=\" + this.formmanage + \"&action=\" + this.action + \"&uuid=\" + this.contentId;\n        }\n    }\n}\n\n/**\n * Delete submissions dialog.\n */\nclass SubmissionsDialogDelete {\n\n    /**\n     * Creates a new submissions delete dialog.\n     * @param element the formdata manage root element\n     * @param submissionsSelect the submissions select component\n     */\n    constructor(element, submissionsSelect) {\n        this.m_submissionsSelect = submissionsSelect;\n        this.m_button = element.querySelector(\".submissions-dialog-delete-button\");\n        this.m_dialog = element.querySelector(\".submissions-dialog-delete\");\n        if (this.m_dialog) {\n            this.m_buttonCancel = this.m_dialog.querySelector(\".button-cancel\");\n            this.m_buttonConfirm = this.m_dialog.querySelector(\".button-confirm\");\n            this.m_messageDeleteAll = this.m_dialog.querySelector(\".delete-all\");\n            this.m_messageDeleteSelected = this.m_dialog.querySelector(\".delete-selected\");\n            this.m_response = this.m_dialog.querySelector(\".delete-response\");\n            const valid = this.m_button && this.m_dialog && this.m_messageDeleteAll && this.m_messageDeleteSelected\n                    && this.m_buttonCancel && this.m_buttonConfirm;\n            if (valid) {\n                this.m_button.addEventListener(\"click\", () =>  { this.onOpen() });\n                this.m_buttonCancel.addEventListener(\"click\", () => { this.onCancel() });\n                this.m_buttonConfirm.addEventListener(\"click\", () => { this.onConfirm() });\n                this.m_messageDeleteSelected.style.display = \"none\";\n            }\n        }\n    }\n    \n    get action() {\n        return this.m_dialog.dataset.action;\n    }\n    \n    /**\n     * Returns the formmanage request parameter.\n     */\n    get formmanage() {\n        const params = new URLSearchParams(location.search);\n        return params.get(\"formmanage\");\n    }\n\n    /**\n     * Creates and configures a HTTP client.\n     * @param url the URL to configure the HTTP client for\n     */\n    createHttpClient(url) {\n        const client = new XMLHttpRequest();\n        client.open(\"POST\", url, true);\n        client.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        return client;\n    }\n\n    /**\n     * Deletes all formdata items.\n     */\n    deleteAll() {\n        const self = this;\n        const client = this.createHttpClient(this.action);\n        const requestData = \"\";\n        client.send(requestData);\n        client.onload = function() {\n            self.m_response.innerHTML = this.responseText;\n            location.href = \"?reload\";\n        }\n        client.onerror = function() {\n            self.m_response.innerHTML = this.responseText;\n        }\n    }\n\n    /**\n     * Deletes the selected formdata items.\n     */\n    deleteSelected() {\n        const self = this;\n        const client = this.createHttpClient(this.action);\n        const ids = this.m_submissionsSelect.getCheckedItemIds();\n        const requestData = ids.length == 0 ? \"\" : \"formdata=\" + ids.join(\",\");\n        client.send(requestData);\n        client.onload = function() {\n            self.m_response.innerHTML = this.responseText;\n            location.href = \"?reload\";\n        }\n        client.onerror = function() {\n            self.m_response.innerHTML = this.responseText;\n        }\n    }\n\n    /**\n     * Cancel handler.\n     */\n    onCancel() {\n        this.m_dialog.close();\n    }\n\n    /**\n     * Confirm handler.\n     */\n    onConfirm() {\n        this.m_submissionsSelect.isModeSelect() ? this.deleteSelected() : this.deleteAll();\n    }\n\n    /**\n     * Open handler.\n     */\n    onOpen() {\n        if (this.m_submissionsSelect.isModeSelect()) {\n            this.m_messageDeleteAll.style.display = \"none\";\n            this.m_messageDeleteSelected.style.display = \"block\";\n        } else {\n            this.m_messageDeleteAll.style.display = \"block\";\n            this.m_messageDeleteSelected.style.display = \"none\";\n        }\n        this.m_dialog.showModal();\n    }\n}\n\n/**\n * Submissions export.\n */\nclass SubmissionsExport {\n\n    /**\n     * Creates a new submissions export.\n     * @param element the formdata manage root element\n     * @param submissionsSelect the submissions select component\n     */\n    constructor(element, submissionsSelect) {\n        this.m_submissionsSelect = submissionsSelect;\n        this.m_buttonExportCsv = element.querySelector(\".btn-export-csv\");\n        this.m_buttonExportExcel = element.querySelector(\".btn-export-excel\");\n        const valid = this.m_buttonExportCsv && this.m_buttonExportExcel;\n        if (valid) {\n            this.m_buttonExportCsv.addEventListener(\"click\", (event) => this.onExport(event) );\n            this.m_buttonExportExcel.addEventListener(\"click\", (event) => this.onExport(event) );\n        }\n    }\n\n    /**\n     * Creates and configures a HTTP client.\n     * @param url the URL to configure the HTTP client for\n     */\n    createHttpClient(url) {\n        const client = new XMLHttpRequest();\n        client.open(\"POST\", url, true);\n        client.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        client.responseType = \"arraybuffer\";\n        return client;\n    }\n\n    /**\n     * Export handler.\n     * @param event the event\n     */\n    onExport(event) {\n        if (this.m_submissionsSelect.isModeSelect()) {\n            event.preventDefault();\n            const client = this.createHttpClient(event.target.href);\n            const requestData = this.m_submissionsSelect.isSelectAll() ? \"\" : \"formdata=\"\n                    + this.m_submissionsSelect.getCheckedItemIds().join(\",\");\n            client.send(requestData);\n            client.onload = function() {\n                const type = this.getResponseHeader(\"Content-Type\");\n                const disp = this.getResponseHeader(\"Content-Disposition\");\n                let name = \"download\";\n                if (disp.includes(\"filename=\")) {\n                    name = disp.substring(disp.indexOf(\"filename=\") + \"filename=\".length);\n                }\n                const data = this.response;\n                const blob = new Blob([data], { type });\n                blob.name = name;\n                const reader = new FileReader();\n                reader.onload = e => {\n                    const anchor = document.createElement('a');\n                    anchor.style.display = 'none';\n                    anchor.href = e.target.result;\n                    anchor.download = name;\n                    anchor.click();\n                };\n                reader.readAsDataURL(blob);\n            }\n        }\n    }\n}\n\n/**\n * Submissions select.\n */\nclass SubmissionsSelect {\n\n    /**\n     * Creates a new submissions select.\n     * @param element the formdata manage root element\n     */\n    constructor(element) {\n        this.m_itemSelectStart = element.querySelector(\".acco-item-select-start\");\n        this.m_itemSelectAll = element.querySelector(\".acco-item-select-all\");\n        this.m_itemSelectNone = element.querySelector(\".acco-item-select-none\");\n        this.m_checkbox = element.querySelectorAll(\".acco-item-check\");\n        this.m_modeSelect = false;\n        if (this.isValid()) {\n            this.m_itemSelectStart.addEventListener(\"click\", (event) => this.onSelectStart(event) );\n            this.m_itemSelectAll.style.display = \"none\";\n            this.m_itemSelectNone.style.display = \"none\";\n        }\n    }\n\n    /**\n     * Returns the IDs of all checked items.\n     */\n    getCheckedItemIds() {\n        const items = [];\n        this.m_checkbox.forEach(checkbox => {\n            if (checkbox.checked) {\n                items.push(checkbox.value);\n            }\n        });\n        return items;\n    }\n\n    /**\n     * Returns whether we are in select mode.\n     */\n    isModeSelect() {\n        return this.m_modeSelect;\n    }\n\n    /**\n     * Returns whether all items are selected.\n     */\n    isSelectAll() {\n        return this.m_checkbox.length == this.getCheckedItemIds().length;\n    }\n\n    /**\n     * Returns whether no item is selected.\n     */\n    isSelectNone() {\n        return getCheckedItemIds().length == 0;\n    }\n\n    /**\n     * Returns whether the initialization of this component is valid.\n     */\n    isValid() {\n        return  this.m_itemSelectStart && this.m_itemSelectAll && this.m_itemSelectNone;\n    }\n\n    /**\n     * Select start handler.\n     */\n    onSelectStart(event) {\n        event.preventDefault();\n        this.m_itemSelectStart.style.display = \"none\";\n        this.m_itemSelectAll.style.display = \"inline-block\";\n        this.m_itemSelectNone.style.display = \"inline-block\";\n        this.m_checkbox.forEach(checkbox => {\n            checkbox.style.display = \"inline-block\";\n        });\n        this.m_itemSelectAll.addEventListener(\"click\", (event) => this.onSelectAll(event) );\n        this.m_itemSelectNone.addEventListener(\"click\", (event) => this.onSelectNone(event) );\n        this.m_modeSelect = true;\n    }\n\n    /**\n     * Select all handler.\n     */\n    onSelectAll(event) {\n        event.preventDefault();\n        this.selectAll(true);\n    }\n\n    /**\n     * Select none handler.\n     */\n    onSelectNone(event) {\n        event.preventDefault();\n        this.selectAll(false);\n    }\n\n    /**\n     * Checks or unchecks all chechboxes.\n     * @param check whether to check or uncheck\n     */\n    selectAll(check) {\n        this.m_checkbox.forEach(checkbox => {\n            checkbox.checked = check;\n        });\n    }\n}\n\n/**\n * Initializes all components.\n */\nexport function init() {\n\n    const formdataManage = document.querySelectorAll(\".formdata-manage\");\n    formdataManage.forEach(element => {\n        const submissionsSelect = new SubmissionsSelect(element);\n        new SubmissionsExport(element, submissionsSelect);\n        new SubmissionsDialogDelete(element, submissionsSelect);\n        const dialogs = element.querySelectorAll(\".submissions-dialog\");\n        dialogs.forEach(dialog => {\n            new SubmissionsDialog(element, dialog);\n        });\n    });\n}\n"],"names":["SubmissionsDialog","constructor","element","dialog","this","m_dialog","m_button","querySelector","action","itemId","addEventListener","showModal","onConfirm","dataset","contentId","formmanage","URLSearchParams","location","search","get","returnValue","href","SubmissionsDialogDelete","submissionsSelect","m_submissionsSelect","m_buttonCancel","m_buttonConfirm","m_messageDeleteAll","m_messageDeleteSelected","m_response","onOpen","onCancel","style","display","createHttpClient","url","client","XMLHttpRequest","open","setRequestHeader","deleteAll","self","send","onload","innerHTML","responseText","onerror","deleteSelected","ids","getCheckedItemIds","requestData","length","join","close","isModeSelect","SubmissionsExport","m_buttonExportCsv","m_buttonExportExcel","event","onExport","responseType","preventDefault","target","isSelectAll","type","getResponseHeader","disp","name","includes","substring","indexOf","data","response","blob","Blob","reader","FileReader","e","anchor","document","createElement","result","download","click","readAsDataURL","SubmissionsSelect","m_itemSelectStart","m_itemSelectAll","m_itemSelectNone","m_checkbox","querySelectorAll","m_modeSelect","isValid","onSelectStart","items","forEach","checkbox","checked","push","value","isSelectNone","onSelectAll","onSelectNone","selectAll","check","init"],"sourceRoot":""}