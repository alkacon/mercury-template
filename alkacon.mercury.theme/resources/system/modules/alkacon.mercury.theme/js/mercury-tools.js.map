{"version":3,"file":"mercury-tools.js?ver=57b9ef0764dbf75ea772","mappings":"uHAoBA,IAAIA,EACAC,EAIJ,SAASC,EAAWC,EAAUC,EAAKC,GAE/B,OAAOF,EAASG,MAAM,KAAOF,EAAM,KAAKG,KAAKF,EACjD,CAEA,SAASG,EAAcC,GAEf,KACIA,EAAWA,EAASC,OAAO,IACdC,OAAS,IAClBF,GAAsBA,GAE1B,IAGIG,GAAU,IAHNC,SAASJ,EAASC,OAAO,EAAE,GAAG,IAGhB,IAFdG,SAASJ,EAASC,OAAO,EAAE,GAAG,IAER,IADtBG,SAASJ,EAASC,OAAO,EAAE,GAAG,KACF,IAEpC,OADIT,GAAOa,QAAQC,KAAK,kBAAoBN,EAAW,aAAeG,GAC9DA,GAAO,IAAO,eAAiB,eAC3C,CAAE,MAAOI,GACL,MAAO,MACX,CACR,CAIO,SAASC,EAAeC,EAAQC,GAEnCnB,EAAKkB,GACLjB,EAAQkB,IAEGL,QAAQC,KAAK,+BAExB,IAAIK,EAAkBpB,EAAG,yBACrBC,GAAOa,QAAQC,KAAK,qEAAuEK,EAAgBT,QAE/G,IAAK,IAAIU,EAAI,EAAGA,EAAID,EAAgBT,OAAQU,IAAK,CAC7C,IAAIC,EAAWtB,EAAGoB,EAAgBC,IAC9BlB,EAAWmB,EAASC,OACxBD,EAASE,QAELvB,GAAOa,QAAQC,KAAK,2DAA6DO,EAASG,KAAK,OAGnG,IAFA,IAAIC,EAAOC,QAAQC,eAAeN,EAASG,KAAK,OAEvCI,EAAIH,EAAKf,OAAO,EAAGkB,GAAG,EAAGA,IAAK,CAEnC,IAAIC,EAAMJ,EAAKG,GACf,GAAIC,EAAIC,KAAM,CACV,IAAIR,EAAOpB,EACXoB,EAAOrB,EAAWqB,EAAM,OAAQO,EAAIC,MACpCR,EAAOrB,EAAWqB,EAAM,QAASO,EAAIzB,OACrCkB,EAAOrB,EAAWqB,EAAM,aAAcf,EAAcsB,EAAIzB,QACxDiB,EAASU,OAAOhC,EAAGuB,GACvB,CACJ,CACJ,CACJ,C,yECzDA,IAAIU,EAGJ,SAASC,IACL,IAAIC,EAAYR,QAAQS,kBAExBH,EAAmBI,SAAQ,SAASC,GAGhC,GAAuB,QADDC,iBAAiBD,GAAS,oBAChD,CAIA,IAAIE,EAAS,EACTC,EAAad,QAAQe,SAASF,OAAOF,GAASK,IAC9CC,EAAgBN,EAAQO,wBAAwBC,OAChDC,EAAgBN,EAAaG,EAC7BI,EAAmBP,EAAaN,EAChCc,EAAsBF,EAAgBZ,EACtCe,EAAeC,OAAOC,YAG1B,KAAIR,GAAiB,GAKjBK,EAAsB,GAAKD,EAAmBE,GAAlD,CAIuB,GAAnBvB,QAAQR,SAAcL,QAAQC,KAAK,wBAA0B0B,EAAa,mBAAqBM,GAC5E,GAAnBpB,QAAQR,SAAcL,QAAQC,KAAK,8BAAgCiC,EAAmB,yBAA2BC,GAMrH,IAAII,EAAsB,GAGtBA,EADAT,GAAiBM,EACKD,EAAsBC,EAEtBF,GAGA,IAEtBR,EAASc,KAAKC,MAAsC,GAAhCD,KAAKE,IAAIH,IAEN,GAAnB1B,QAAQR,SAAcL,QAAQC,KAC9B,2BAA8B6B,EAC9B,kBAAoBM,EACpB,YAAcV,EACd,sBAAwBQ,IAIhCV,EAAQmB,MAAMC,mBAAsB,OAASlB,EAAS,IA7BtD,CAlBA,CAgDJ,GACJ,CAIO,SAASmB,IAEZ1B,EAAqB2B,SAASC,iBAAiB,uBAC3ClC,QAAQR,UACRL,QAAQC,KAAK,mBACbD,QAAQC,KAAK,uDAAyDkB,EAAmBtB,SAGzFsB,EAAmBtB,OAAS,IAC5BwC,OAAOW,iBAAiB,SAAU5B,GAClCiB,OAAOW,iBAAiB,SAAU5B,GAClCA,IAER,C","sources":["webpack://mercury-template/./template-src/js/csssampler.js","webpack://mercury-template/./template-src/js/parallax.js"],"sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\nfunction replaceAll(template, key, value) {\n\n    return template.split(\"$(\" + key + \")\").join(value);\n}\n\nfunction getContrastBg(hexcolor){\n\n        try {\n            hexcolor = hexcolor.substr(1);\n            if (hexcolor.length < 6) {\n                hexcolor = hexcolor + hexcolor;\n            }\n            var r = parseInt(hexcolor.substr(0,2),16);\n            var g = parseInt(hexcolor.substr(2,2),16);\n            var b = parseInt(hexcolor.substr(4,2),16);\n            var yiq = ((r*299)+(g*587)+(b*114))/1000;\n            if (DEBUG) console.info(\"getContrastBg(#\" + hexcolor + \") result: \" + yiq);\n            return (yiq >= 220) ? 'box box-grey' : 'box box-white';\n        } catch (e) {\n            return 'p-20';\n        }\n}\n\n/****** Exported functions ******/\n\nexport function initCssSampler(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    if (DEBUG) console.info(\"CssSampler.initCssSampler()\");\n\n    var $sampleElements = jQ(\".template-info.sample\");\n    if (DEBUG) console.info(\"CssSampler.initCssSampler() .template-info.sample elements found: \" + $sampleElements.length);\n\n    for (var i = 0; i < $sampleElements.length; i++) {\n        var $element = jQ($sampleElements[i]);\n        var template = $element.html();\n        $element.empty();\n\n        if (DEBUG) console.info(\"CssSampler.initCssSampler() Creating CSS sample for id: \" + $element.attr('id'));\n        var data = Mercury.getCssJsonData($element.attr('id'));\n\n        for (var j = data.length-1; j>=0; j--) {\n\n            var obj = data[j];\n            if (obj.name) {\n                var html = template;\n                html = replaceAll(html, \"name\", obj.name);\n                html = replaceAll(html, \"value\", obj.value);\n                html = replaceAll(html, \"background\", getContrastBg(obj.value));\n                $element.append(jQ(html));\n            }\n        }\n    }\n}\n\n","/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\n\n\"use strict\";\n\nvar m_parallaxElements;\n\n// function to be called whenever the window is scrolled or resized\nfunction update(){\n    var scrollTop = Mercury.windowScrollTop();\n\n    m_parallaxElements.forEach(function(element){\n\n        var backgroundImage = getComputedStyle(element)[\"background-image\"];\n        if (backgroundImage == 'none') {\n            return;\n        }\n\n        var offset = 0;\n        var elementTop = Mercury.position.offset(element).top;\n        var elementHeight = element.getBoundingClientRect().height;\n        var elementBottom = elementTop + elementHeight;\n        var elementScrollTop = elementTop - scrollTop;\n        var elementScrollBottom = elementBottom - scrollTop;\n        var windowHeight = window.innerHeight;\n\n        // Check if element is to small for parallax effect\n        if (elementHeight <= 1) {\n            return;\n        }\n\n        // Check if element is visible, if not just return\n        if (elementScrollBottom < 0 || elementScrollTop > windowHeight) {\n            return;\n        }\n\n        if (Mercury.debug() == 2) console.info(\"Parallax elementTop: \" + elementTop + \" elementBottom: \" + elementBottom);\n        if (Mercury.debug() == 2) console.info(\"Parallax elementScrollTop: \" + elementScrollTop + \" elementScrollBottom: \" + elementScrollBottom);\n\n        // This effect assumes there is a full size background image.\n        // The background is slightly shifted up while the bottom of the\n        // element is not in view. Once the bottom is in view,\n        // or the screen top is reached, the shift effect stops.\n        var elementBottomOffset = 0;\n\n        if (elementHeight <= windowHeight) {\n            elementBottomOffset = elementScrollBottom - windowHeight;\n        } else {\n            elementBottomOffset = elementScrollTop;\n        }\n\n        if (elementBottomOffset > 0) {\n            // The bottom is not in view\n            offset = Math.round(Math.abs(elementBottomOffset) * 0.5);\n\n            if (Mercury.debug() == 2) console.info(\n                \"Parallax elementHeight: \" +  elementHeight +\n                \" windowHeight: \" + windowHeight +\n                \" offset: \" + offset +\n                \" elementScrollTop: \" + elementScrollTop);\n\n        }\n\n        element.style.backgroundPosition = (\"50% \" + offset + \"px\");\n    });\n}\n\n/****** Exported functions ******/\n\nexport function initParallax() {\n\n    m_parallaxElements = document.querySelectorAll('.effect-parallax-bg');\n    if (Mercury.debug()) {\n        console.info(\"Parallax.init()\");\n        console.info(\"Parallax.init() .effect-parallax-bg elements found: \" + m_parallaxElements.length);\n    }\n\n    if (m_parallaxElements.length > 0) {\n        window.addEventListener('scroll', update);\n        window.addEventListener('resize', update);\n        update();\n    }\n}\n"],"names":["jQ","DEBUG","replaceAll","template","key","value","split","join","getContrastBg","hexcolor","substr","length","yiq","parseInt","console","info","e","initCssSampler","jQuery","debug","$sampleElements","i","$element","html","empty","attr","data","Mercury","getCssJsonData","j","obj","name","append","m_parallaxElements","update","scrollTop","windowScrollTop","forEach","element","getComputedStyle","offset","elementTop","position","top","elementHeight","getBoundingClientRect","height","elementBottom","elementScrollTop","elementScrollBottom","windowHeight","window","innerHeight","elementBottomOffset","Math","round","abs","style","backgroundPosition","initParallax","document","querySelectorAll","addEventListener"],"sourceRoot":""}