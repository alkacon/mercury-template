// This program is part of the OpenCms Mercury Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file: _generics.scss
 */

// Colored backgrounds

.box,
.box-high {
    @include set-box-colors($highlight-color, true, true);
}

.box-colors {
    @include set-box-colors($body-bg, true, true);
}

.box-oct-warning {
    @include set-box-colors($con-col-orange);
}

.box-oct-error {
    @include set-box-colors($con-col-red-light);
}

.box-oct-info {
    @include set-box-colors($con-col-cyan);
}

.box-body {
    @extend .box-body-base;
}

.box-theme {
    @include set-box-colors($main-theme);
}

.box-dark {
    @include set-box-colors($darkbg-color);
}


.box-inner {
    --#{$prefix}body-bg:                            var(--#{$prefix}highlight-color);
    --#{$prefix}body-color:                         var(--#{$prefix}highlight-fg-color);
    --#{$prefix}body-bg-rgb:                        var(--#{$prefix}highlight-color-rgb);
}

.box,
.box-inner,
.box-colors {
    color: var(--#{$prefix}body-color);
    background-color: var(--#{$prefix}body-bg);
}

.box,
.box-inner {
    padding: var(--#{$prefix}box-padding);
    border-radius: var(--#{$prefix}box-border-radius);
    overflow: hidden;

    &.fully-linked {
        // for boxed elements that are linked ffully, link icon-box or link-box, we want the complete colored space to be clickable
        padding: 0;
        > a {
            padding: var(--#{$prefix}box-padding);
        }
    }

    &.oc-drag-element {
        // in edit mode allow overflow, otherwise edit points may not be visible (e.g. for lists)
        overflow: visible;
    }

    &.type-tab .tab-content {
        padding-bottom: 0;
    }
}

.box {
    &.box-ratio-1-1 {
        aspect-ratio: 1 / 1;
    }
    &.box-ratio-4-3 {
        aspect-ratio: 4 / 3;
    }
    &.box-ratio-3-2 {
        aspect-ratio: 3 / 2;
    }
    &.box-ratio-16-9 {
        aspect-ratio: 16 / 9;
    }
    &.box-ratio-35-45 {
        aspect-ratio: 35 / 45;
    }
    &.box-ratio-2-3 {
        aspect-ratio: 2 / 3;
    }
}

@each $color, $value in $theme-colors {

    .box-#{""+$color} {
        @if (("high" != ""+$color) and ("body" != ""+$color) and ("theme" != ""+$color) and ("dark" != ""+$color)) {
            // special case: these are already defind by default (see above)
            @include set-box-colors($value);
        }

        &.transparent {
            background-color: rgb(var(--#{$prefix}body-bg-rgb), 0.7);
        }
    }

    .bc-#{""+$color} {
        --#{$prefix}body-bg: #{$value};
        background-color: var(--#{$prefix}body-bg);

        &.transparent {
            background-color: rgb(var(--#{$prefix}body-bg-rgb), 0.7);
        }
    }

    .color-#{""+$color}:not(.imageflip) {
        @include change-colors($value);
    }
}

// Colored text

@each $color-name, $text-color in $text-colors {

    .text-#{""+$color-name} {
        @if ($color-name != "default") {
            color: $text-color;
            *:not(a):not(span) {
                color: $text-color;
            }
        } @else {
            @extend .text-dark;
        }
    }
}

// Link text colors

@each $color-name, $text-color, $hover-color in $link-colors {

    .links-#{""+$color-name} {
        @if ($color-name != "default") {
            @include colored-a($text-color, $hover-color);
        } @else {
            @extend .links-theme;
        }
    }
}

// Font sizes

@each $fontsize in $font-sizes {

    .fs-#{$fontsize} {
        font-size: #{$fontsize}px;
    }
}

// Border base

@each $line-size in $border-sizes {

    .bo-#{$line-size}  {
        border: #{$line-size}px solid $border-default-color;
        padding: calc(#{$box-padding} - #{$line-size}px);
        border-radius: var(--#{$prefix}border-radius);
    }
}

// Borders with round corners

@each $radius-name, $radius in $border-radiuses {

    .bo-radius-#{$radius-name} {
        border: 0 solid;
        border-radius: $radius;
    }
}

// Colored borders

@each $color, $value in $theme-colors {

    .bo-#{""+$color}  {
        border-color: $value;
    }
}

// Borders styles

@each $border-style in $border-styles {

    .bo-#{$border-style}  {
        border-style: $border-style;
    }
}

.bo-none {
    border: none;
}

// Borders positions

@each $position in $border-positions {

    @each $line-size in $border-sizes {

        .bo-#{$position}-#{$line-size}  {
            border-#{$position}: #{$line-size}px solid $border-default-color;
            padding: 20px;
        }
    }

    @each $border-style in $border-styles {

        .bo-#{$position}-#{$border-style}  {
            border-#{$position}-style: $border-style;
        }
    }
}

// Margins and paddings

@each $space in $margins-paddings {

    $rem-space: 0;
    @if ($space > 0) {
        $rem-space: #{$space * 0.1}rem;
    }

    .p-#{$space} {
        padding: $rem-space !important;
    }
    .ph-#{$space},
    .pl-#{$space} {
        padding-left: $rem-space !important;
    }
    .ph-#{$space},
    .pr-#{$space} {
        padding-right: $rem-space !important;
    }
    .pv-#{$space},
    .pt-#{$space} {
        padding-top: $rem-space !important;
    }
    .pv-#{$space},
    .pb-#{$space} {
        padding-bottom: $rem-space !important;
    }

    .m-#{$space} {
        margin: $rem-space !important;
    }
    .mh-#{$space},
    .ml-#{$space} {
        margin-left: $rem-space !important;
    }
    .mh-#{$space},
    .mr-#{$space} {
        margin-right: $rem-space !important;
    }
    .mv-#{$space},
    .mt-#{$space} {
        margin-top: $rem-space !important;
    }
    .mv-#{$space},
    .mb-#{$space} {
        margin-bottom: $rem-space !important;
    }

    .m-neg-#{$space} {
        margin: -#{$rem-space} !important;
    }
    .mh-neg-#{$space},
    .ml-neg-#{$space} {
        margin-left: -#{$rem-space} !important;
    }
    .mh-neg-#{$space},
    .mr-neg-#{$space} {
        margin-right: -#{$rem-space}  !important;
    }
    .mv-neg-#{$space},
    .mt-neg-#{$space} {
        margin-top: -#{$rem-space} !important;
    }
    .mv-neg-#{$space},
    .mb-neg-#{$space} {
        margin-bottom: -#{$rem-space} !important;
    }
}

.mt-pm {
    margin-top: var(--#{$prefix}paragraph-margin-bottom) !important;
}
.mb-pm {
    margin-bottom: var(--#{$prefix}paragraph-margin-bottom) !important;
}
.mt-xs {
    margin-top: var(--#{$prefix}default-margin-verysmall-bottom) !important;
}
.mb-xs {
    margin-bottom: var(--#{$prefix}default-margin-verysmall-bottom) !important;
}
.mt-sm {
    margin-top: var(--#{$prefix}default-margin-small) !important;
}
.mb-sm {
    margin-bottom: var(--#{$prefix}default-margin-small) !important;
}
.mt-md {
    margin-top: var(--#{$prefix}default-margin) !important;
}
.mb-md {
    margin-bottom: var(--#{$prefix}default-margin) !important;
}

// Custom spacers (for function element)

.type-spacer {
    &[class^="box-"],
    &[class*=" box-"] {
        // only set a background color in case a box color has been selectd, so the default is 'transparent'
        background-color: var(--#{$prefix}body-bg);
    }

    &.space-xs {
        padding-bottom: var(--#{$prefix}default-margin-verysmall);
    }
    &.space-sm {
        padding-bottom: var(--#{$prefix}default-margin-small);
    }
    &.space-md {
        padding-bottom: var(--#{$prefix}default-margin);
    }
    &.space-lg {
        padding-bottom: calc(2 * var(--#{$prefix}default-margin));
    }
    &.space-xl {
        padding-bottom: calc(4 * var(--#{$prefix}default-margin));
    }
    &.space-xxl {
        padding-bottom: calc(8 * var(--#{$prefix}default-margin));
    }

    @include media-breakpoint-up(lg) {
        &.space-lg-none {
            padding-bottom: 0;
        }
        &.space-lg-xs {
            padding-bottom: var(--#{$prefix}default-margin-verysmall);
        }
        &.space-lg-sm {
            padding-bottom: var(--#{$prefix}default-margin-small);
        }
        &.space-lg-md {
            padding-bottom: var(--#{$prefix}default-margin);
        }
        &.space-lg-lg {
            padding-bottom: calc(2 * var(--#{$prefix}default-margin));
        }
        &.space-lg-xl {
            padding-bottom: calc(4 * var(--#{$prefix}default-margin));
        }
        &.space-lg-xxl {
            padding-bottom: calc(8 * var(--#{$prefix}default-margin));
        }
    }
}

.opencms-page-editor {
    .type-spacer {
        background-image: repeating-linear-gradient(90deg,rgba(0,0,0,.1),rgba(0,0,0,.1) 1px,transparent 1px,transparent 20px)
    }
}

// Responsive alignment of some types

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .align#{$infix}-right  {
            &.piece.full {
                text-align: right;
            }
            &.ls-row {
                > ul {
                    display: block;
                    float: right;
                }
            }
        }

        .mb-0#{$infix} {
            margin-bottom: 0 !important;
        }
    }
}
